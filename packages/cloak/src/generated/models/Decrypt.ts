/* tslint:disable */
/* eslint-disable */
/**
 * Cloak Key Management API
 * Cloak provides a simple key management API for RSA key pairs. It allows users to create a key pair where the private key will only be revealed after a certain time. The time is determined by the conclusion of an auction that the key is mapped to based on observations of blockchain events.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * A decrypt object for a bid
 * @export
 * @interface Decrypt
 */
export interface Decrypt {
  /**
   * The decrypted amount out value of the bid as a uint256
   * @type {string}
   * @memberof Decrypt
   */
  amountOut?: string;
  /**
   * The seed used to ciphertext as a bytes32
   * @type {Array<number>}
   * @memberof Decrypt
   */
  seed?: Array<number>;
}

/**
 * Check if a given object implements the Decrypt interface.
 */
export function instanceOfDecrypt(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function DecryptFromJSON(json: any): Decrypt {
  return DecryptFromJSONTyped(json, false);
}

export function DecryptFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Decrypt {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    amountOut: !exists(json, "amount_out") ? undefined : json["amount_out"],
    seed: !exists(json, "seed") ? undefined : json["seed"],
  };
}

export function DecryptToJSON(value?: Decrypt | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    amount_out: value.amountOut,
    seed: value.seed,
  };
}
