/* tslint:disable */
/* eslint-disable */
/**
 * Cloak Key Management API
 * Cloak provides a simple key management API for BN254 key pairs. It allows users to create a key pair where the private key will only be revealed after a certain time. The time is determined by the conclusion of an auction that the key is mapped to based on observations of blockchain events.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Config } from "../models/index";
import { ConfigFromJSON, ConfigToJSON } from "../models/index";

export interface ConfigsAuctionModulesGetRequest {
  xChainId: number;
  xAuctionHouse: string;
}

export interface ConfigsChainChainIdGetRequest {
  chainId: number;
}

/**
 *
 */
export class ConfigsApi extends runtime.BaseAPI {
  /**
   * Gets the supported auction modules for the provided configuration.
   */
  async configsAuctionModulesGetRaw(
    requestParameters: ConfigsAuctionModulesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<string>>> {
    if (
      requestParameters.xChainId === null ||
      requestParameters.xChainId === undefined
    ) {
      throw new runtime.RequiredError(
        "xChainId",
        "Required parameter requestParameters.xChainId was null or undefined when calling configsAuctionModulesGet.",
      );
    }

    if (
      requestParameters.xAuctionHouse === null ||
      requestParameters.xAuctionHouse === undefined
    ) {
      throw new runtime.RequiredError(
        "xAuctionHouse",
        "Required parameter requestParameters.xAuctionHouse was null or undefined when calling configsAuctionModulesGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.xChainId !== undefined &&
      requestParameters.xChainId !== null
    ) {
      headerParameters["x-chain-id"] = String(requestParameters.xChainId);
    }

    if (
      requestParameters.xAuctionHouse !== undefined &&
      requestParameters.xAuctionHouse !== null
    ) {
      headerParameters["x-auction-house"] = String(
        requestParameters.xAuctionHouse,
      );
    }

    const response = await this.request(
      {
        path: `/configs/auction_modules`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Gets the supported auction modules for the provided configuration.
   */
  async configsAuctionModulesGet(
    requestParameters: ConfigsAuctionModulesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<string>> {
    const response = await this.configsAuctionModulesGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Gets all supported configurations for the specified chain.
   */
  async configsChainChainIdGetRaw(
    requestParameters: ConfigsChainChainIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Config>>> {
    if (
      requestParameters.chainId === null ||
      requestParameters.chainId === undefined
    ) {
      throw new runtime.RequiredError(
        "chainId",
        "Required parameter requestParameters.chainId was null or undefined when calling configsChainChainIdGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/configs/chain/{chain_id}`.replace(
          `{${"chain_id"}}`,
          encodeURIComponent(String(requestParameters.chainId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ConfigFromJSON),
    );
  }

  /**
   * Gets all supported configurations for the specified chain.
   */
  async configsChainChainIdGet(
    requestParameters: ConfigsChainChainIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Config>> {
    const response = await this.configsChainChainIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Gets all chain configurations supported by the API.
   */
  async configsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Config>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/configs`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ConfigFromJSON),
    );
  }

  /**
   * Gets all chain configurations supported by the API.
   */
  async configsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Config>> {
    const response = await this.configsGetRaw(initOverrides);
    return await response.value();
  }
}
